{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createTextVNode as _createTextVNode, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"product-list\"\n};\nconst _hoisted_2 = [\"onClick\"];\nconst _hoisted_3 = {\n  key: 0,\n  class: \"cart\"\n};\nconst _hoisted_4 = [\"onClick\"];\nconst _hoisted_5 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[2] || (_cache[2] = _createElementVNode(\"h2\", null, \"Продукты\", -1 /* HOISTED */)), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.toggleCart && $options.toggleCart(...args))\n  }, _toDisplayString($data.showCart ? 'Скрыть корзину' : 'Показать корзину'), 1 /* TEXT */), _createElementVNode(\"ul\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.products, product => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: product.id\n    }, [_createTextVNode(_toDisplayString(product.name) + \" - \" + _toDisplayString(product.price) + \" $ \", 1 /* TEXT */), _createElementVNode(\"button\", {\n      onClick: $event => $options.addToCart(product.id)\n    }, \"Добавить в корзину\", 8 /* PROPS */, _hoisted_2)]);\n  }), 128 /* KEYED_FRAGMENT */))]), $data.showCart ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_cache[1] || (_cache[1] = _createElementVNode(\"h3\", null, \"Корзина\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.cartItems, item => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: item.product_id\n    }, [_createTextVNode(_toDisplayString(item.name) + \" - \" + _toDisplayString(item.price) + \" $ (Количество: \" + _toDisplayString(item.quantity) + \") \", 1 /* TEXT */), _createElementVNode(\"button\", {\n      onClick: $event => $options.removeFromCart(item.product_id)\n    }, \"Удалить\", 8 /* PROPS */, _hoisted_4)]);\n  }), 128 /* KEYED_FRAGMENT */))]), $data.cartItems.length === 0 ? (_openBlock(), _createElementBlock(\"p\", _hoisted_5, \"Корзина пуста.\")) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_createElementVNode","onClick","_cache","args","$options","toggleCart","$data","showCart","_hoisted_1","_Fragment","_renderList","products","product","id","_createTextVNode","_toDisplayString","name","price","$event","addToCart","_hoisted_2","_hoisted_3","cartItems","item","product_id","quantity","removeFromCart","_hoisted_4","length","_hoisted_5","_createCommentVNode"],"sources":["D:\\JetBrains\\PROJECTPY\\cite_store\\frontend\\src\\views\\ProductsPage.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>Продукты</h2>\r\n    <button @click=\"toggleCart\">{{ showCart ? 'Скрыть корзину' : 'Показать корзину' }}</button>\r\n\r\n    <ul class=\"product-list\">\r\n      <li v-for=\"product in products\" :key=\"product.id\">\r\n        {{ product.name }} - {{ product.price }} $\r\n        <button @click=\"addToCart(product.id)\">Добавить в корзину</button>\r\n      </li>\r\n    </ul>\r\n\r\n    <div v-if=\"showCart\" class=\"cart\">\r\n      <h3>Корзина</h3>\r\n      <ul>\r\n        <li v-for=\"item in cartItems\" :key=\"item.product_id\">\r\n          {{ item.name }} - {{ item.price }} $ (Количество: {{ item.quantity }})\r\n          <button @click=\"removeFromCart(item.product_id)\">Удалить</button>\r\n        </li>\r\n      </ul>\r\n      <p v-if=\"cartItems.length === 0\">Корзина пуста.</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      products: [],\r\n      cartItems: [],\r\n      showCart: false,\r\n    };\r\n  },\r\n  async created() {\r\n    await this.fetchProducts();\r\n    await this.fetchCart();\r\n  },\r\n  methods: {\r\n    async fetchProducts() {\r\n      const response = await axios.get('http://localhost:5000/api/all_products');\r\n      this.products = response.data.results;\r\n    },\r\n    async fetchCart() {\r\n      const token = localStorage.getItem('access_token');\r\n      try {\r\n        const response = await axios.get('http://localhost:5000/api/cart', {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n        this.cartItems = response.data.cart;\r\n      } catch (error) {\r\n        console.error('Ошибка получения корзины', error);\r\n      }\r\n    },\r\n    async addToCart(productId) {\r\n      const token = localStorage.getItem('access_token');\r\n      try {\r\n        await axios.post('http://localhost:5000/api/cart/add', { product_id: productId }, {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n        alert('Товар добавлен в корзину!');\r\n        await this.fetchCart(); // Обновляем корзину после добавления товара\r\n      } catch (error) {\r\n        alert('Ошибка добавления товара в корзину');\r\n      }\r\n    },\r\n    async removeFromCart(productId) {\r\n      const token = localStorage.getItem('access_token');\r\n      try {\r\n        await axios.delete(`http://localhost:5000/api/cart/remove/${productId}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n        await this.fetchCart(); // Обновляем корзину после удаления\r\n      } catch (error) {\r\n        alert('Ошибка удаления товара из корзины');\r\n      }\r\n    },\r\n    toggleCart() {\r\n      this.showCart = !this.showCart;\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.product-list {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  margin-left: 50px; /* Изменено для лучшего отображения */\r\n  margin-right: 50px; /* Изменено для лучшего отображения */\r\n  list-style-type: none; /* Убираем маркеры списка */\r\n  padding: 0; /* Убираем отступы */\r\n}\r\n\r\n.product-list li {\r\n  margin: 10px; /* Отступы между товарами */\r\n  padding: 10px;\r\n  border: 1px solid #ccc; /* Граница для каждого товара */\r\n  border-radius: 5px; /* Закругленные углы */\r\n  width: 200px; /* Ширина элемента списка */\r\n  text-align: center; /* Центрирование текста */\r\n}\r\n\r\n.cart {\r\n  margin-top: 20px; /* Отступ сверху для корзины */\r\n  border: 1px solid #ccc; /* Граница для корзины */\r\n  padding: 10px; /* Отступы внутри корзины */\r\n  border-radius: 5px; /* Закругленные углы */\r\n}\r\n</style>"],"mappings":";;EAKQA,KAAK,EAAC;AAAc;mBAL5B;;EAAAC,GAAA;EAYyBD,KAAK,EAAC;;mBAZ/B;;EAAAC,GAAA;AAAA;;uBACEC,mBAAA,CAqBM,c,0BApBJC,mBAAA,CAAiB,YAAb,UAAQ,sBACZA,mBAAA,CAA2F;IAAlFC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,UAAA,IAAAD,QAAA,CAAAC,UAAA,IAAAF,IAAA,CAAU;sBAAKG,KAAA,CAAAC,QAAQ,0DAEvCP,mBAAA,CAKK,MALLQ,UAKK,I,kBAJHT,mBAAA,CAGKU,SAAA,QATXC,WAAA,CAM4BJ,KAAA,CAAAK,QAAQ,EAAnBC,OAAO;yBAAlBb,mBAAA,CAGK;MAH4BD,GAAG,EAAEc,OAAO,CAACC;QANpDC,gBAAA,CAAAC,gBAAA,CAOWH,OAAO,CAACI,IAAI,IAAG,KAAG,GAAAD,gBAAA,CAAGH,OAAO,CAACK,KAAK,IAAG,KACxC,iBAAAjB,mBAAA,CAAkE;MAAzDC,OAAK,EAAAiB,MAAA,IAAEd,QAAA,CAAAe,SAAS,CAACP,OAAO,CAACC,EAAE;OAAG,oBAAkB,iBARjEO,UAAA,E;oCAYed,KAAA,CAAAC,QAAQ,I,cAAnBR,mBAAA,CASM,OATNsB,UASM,G,0BARJrB,mBAAA,CAAgB,YAAZ,SAAO,sBACXA,mBAAA,CAKK,c,kBAJHD,mBAAA,CAGKU,SAAA,QAlBbC,WAAA,CAe2BJ,KAAA,CAAAgB,SAAS,EAAjBC,IAAI;yBAAfxB,mBAAA,CAGK;MAH0BD,GAAG,EAAEyB,IAAI,CAACC;QAfjDV,gBAAA,CAAAC,gBAAA,CAgBaQ,IAAI,CAACP,IAAI,IAAG,KAAG,GAAAD,gBAAA,CAAGQ,IAAI,CAACN,KAAK,IAAG,kBAAgB,GAAAF,gBAAA,CAAGQ,IAAI,CAACE,QAAQ,IAAG,IACrE,iBAAAzB,mBAAA,CAAiE;MAAxDC,OAAK,EAAAiB,MAAA,IAAEd,QAAA,CAAAsB,cAAc,CAACH,IAAI,CAACC,UAAU;OAAG,SAAO,iBAjBlEG,UAAA,E;oCAoBerB,KAAA,CAAAgB,SAAS,CAACM,MAAM,U,cAAzB7B,mBAAA,CAAmD,KApBzD8B,UAAA,EAoBuC,gBAAc,KApBrDC,mBAAA,e,KAAAA,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}