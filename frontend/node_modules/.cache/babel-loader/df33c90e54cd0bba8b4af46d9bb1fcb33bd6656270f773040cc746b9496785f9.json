{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[0] || (_cache[0] = _createElementVNode(\"h2\", null, \"Продукты\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.products, product => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: product.id\n    }, [_createTextVNode(_toDisplayString(product.name) + \" - \" + _toDisplayString(product.price) + \" $ \", 1 /* TEXT */), _createElementVNode(\"button\", {\n      onClick: $event => $options.addToCart(product.id)\n    }, \"Добавить в корзину\", 8 /* PROPS */, _hoisted_1)]);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["_createElementBlock","_createElementVNode","_Fragment","_renderList","$data","products","product","key","id","_createTextVNode","_toDisplayString","name","price","onClick","$event","$options","addToCart","_hoisted_1"],"sources":["D:\\JetBrains\\PROJECTPY\\cite_store\\frontend\\src\\views\\ProductsPage.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>Продукты</h2>\r\n    <ul>\r\n      <li v-for=\"product in products\" :key=\"product.id\">\r\n        {{ product.name }} - {{ product.price }} $\r\n        <button @click=\"addToCart(product.id)\">Добавить в корзину</button>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      products: [],\r\n    };\r\n  },\r\n  async created() {\r\n    const response = await axios.get('http://localhost:5000/api/all_products');\r\n    this.products = response.data.results;\r\n  },\r\n  methods: {\r\n    async addToCart(productId) {\r\n      const token = localStorage.getItem('access_token');\r\n      try {\r\n        await axios.post('http://localhost:5000/api/cart/add', { product_id: productId }, {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n        alert('Товар добавлен в корзину!');\r\n      } catch (error) {\r\n        alert('Ошибка добавления товара в корзину');\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n\r\n<style scoped>\r\n.product-list {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  margin-left: 50px; /* Изменено для лучшего отображения */\r\n  margin-right: 50px; /* Изменено для лучшего отображения */\r\n  list-style-type: none; /* Убираем маркеры списка */\r\n  padding: 0; /* Убираем отступы */\r\n}\r\n\r\n.product-list li {\r\n  margin: 10px; /* Отступы между товарами */\r\n  padding: 10px;\r\n  border: 1px solid #ccc; /* Граница для каждого товара */\r\n  border-radius: 5px; /* Закругленные углы */\r\n  width: 200px; /* Ширина элемента списка */\r\n  text-align: center; /* Центрирование текста */\r\n}\r\n</style>"],"mappings":";mBAAA;;uBACEA,mBAAA,CAQM,c,0BAPJC,mBAAA,CAAiB,YAAb,UAAQ,sBACZA,mBAAA,CAKK,c,kBAJHD,mBAAA,CAGKE,SAAA,QAPXC,WAAA,CAI4BC,KAAA,CAAAC,QAAQ,EAAnBC,OAAO;yBAAlBN,mBAAA,CAGK;MAH4BO,GAAG,EAAED,OAAO,CAACE;QAJpDC,gBAAA,CAAAC,gBAAA,CAKWJ,OAAO,CAACK,IAAI,IAAG,KAAG,GAAAD,gBAAA,CAAGJ,OAAO,CAACM,KAAK,IAAG,KACxC,iBAAAX,mBAAA,CAAkE;MAAzDY,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,SAAS,CAACV,OAAO,CAACE,EAAE;OAAG,oBAAkB,iBANjES,UAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}