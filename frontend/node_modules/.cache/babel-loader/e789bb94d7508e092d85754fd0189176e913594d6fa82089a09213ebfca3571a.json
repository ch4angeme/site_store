{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[0] || (_cache[0] = _createElementVNode(\"h2\", null, \"Корзина\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.cartItems, item => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: item.product_id\n    }, [_createTextVNode(_toDisplayString(item.name) + \" - \" + _toDisplayString(item.price) + \" $ (Количество: \" + _toDisplayString(item.quantity) + \") \", 1 /* TEXT */), _createElementVNode(\"button\", {\n      onClick: $event => $options.removeFromCart(item.product_id)\n    }, \"Удалить\", 8 /* PROPS */, _hoisted_1)]);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["_createElementBlock","_createElementVNode","_Fragment","_renderList","$data","cartItems","item","key","product_id","_createTextVNode","_toDisplayString","name","price","quantity","onClick","$event","$options","removeFromCart","_hoisted_1"],"sources":["D:\\JetBrains\\PROJECTPY\\cite_store\\frontend\\src\\components\\CartPage.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>Корзина</h2>\r\n    <ul>\r\n      <li v-for=\"item in cartItems\" :key=\"item.product_id\">\r\n        {{ item.name }} - {{ item.price }} $ (Количество: {{ item.quantity }})\r\n        <button @click=\"removeFromCart(item.product_id)\">Удалить</button>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      cartItems: [],\r\n    };\r\n  },\r\n  async created() {\r\n    await this.fetchCart();\r\n  },\r\n  methods: {\r\n    async fetchCart() {\r\n      const token = localStorage.getItem('access_token');\r\n      try {\r\n        const response = await axios.get('http://localhost:5000/api/cart', {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n        this.cartItems = response.data.cart;\r\n      } catch (error) {\r\n        alert('Ошибка получения корзины');\r\n      }\r\n    },\r\n    async removeFromCart(productId) {\r\n      const token = localStorage.getItem('access_token');\r\n      try {\r\n        await axios.delete(`http://localhost:5000/api/cart/remove/${productId}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n        await this.fetchCart(); // Обновляем корзину после удаления\r\n      } catch (error) {\r\n        alert('Ошибка удаления товара из корзины');\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n\r\n<style scoped>\r\n.cart {\r\n  border: 1px solid #ccc;\r\n  padding: 10px;\r\n  position: absolute;\r\n  top: 50px; /* Позиция корзины */\r\n  right: 20px; /* Позиция корзины */\r\n  background-color: white;\r\n  z-index: 1000; /* Чтобы корзина была поверх других элементов */\r\n}\r\n</style>"],"mappings":";mBAAA;;uBACEA,mBAAA,CAQM,c,0BAPJC,mBAAA,CAAgB,YAAZ,SAAO,sBACXA,mBAAA,CAKK,c,kBAJHD,mBAAA,CAGKE,SAAA,QAPXC,WAAA,CAIyBC,KAAA,CAAAC,SAAS,EAAjBC,IAAI;yBAAfN,mBAAA,CAGK;MAH0BO,GAAG,EAAED,IAAI,CAACE;QAJ/CC,gBAAA,CAAAC,gBAAA,CAKWJ,IAAI,CAACK,IAAI,IAAG,KAAG,GAAAD,gBAAA,CAAGJ,IAAI,CAACM,KAAK,IAAG,kBAAgB,GAAAF,gBAAA,CAAGJ,IAAI,CAACO,QAAQ,IAAG,IACrE,iBAAAZ,mBAAA,CAAiE;MAAxDa,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,cAAc,CAACX,IAAI,CAACE,UAAU;OAAG,SAAO,iBANhEU,UAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}