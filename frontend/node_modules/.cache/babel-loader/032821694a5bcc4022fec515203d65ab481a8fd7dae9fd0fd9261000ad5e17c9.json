{"ast":null,"code":"import axios from 'axios';\nimport EventBus from '../Refresh';\nexport default {\n  data() {\n    return {\n      user: null,\n      error: null,\n      newUsername: ''\n    };\n  },\n  async created() {\n    await this.fetchProfile();\n  },\n  methods: {\n    async fetchProfile() {\n      try {\n        const token = localStorage.getItem('access_token');\n        const response = await axios.get('http://localhost:5000/api/users/user/profile', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        this.user = response.data;\n      } catch (error) {\n        this.handleError(error, 'Ошибка получения данных профиля');\n      }\n    },\n    async updateUsername() {\n      try {\n        const token = localStorage.getItem('access_token');\n        const response = await axios.put('http://localhost:5000/api/users/user/profile/update', {\n          username: this.newUsername\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n\n        // Обновляем имя пользователя в локальном состоянии\n        this.user.username = response.data.username;\n        EventBus.emit('username-updated', this.user.username);\n        this.newUsername = '';\n        this.error = null; // Сбрасываем сообщение об ошибке, если обновление прошло успешно\n      } catch (error) {\n        this.handleError(error, 'Ошибка обновления имени пользователя');\n        alert(\"Имя занято!\");\n      }\n    },\n    handleError(error, defaultMessage) {\n      if (error.response && error.response.data) {\n        this.error = error.response.data.message || defaultMessage;\n      } else {\n        this.error = 'Ошибка соединения с сервером';\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","EventBus","data","user","error","newUsername","created","fetchProfile","methods","token","localStorage","getItem","response","get","headers","Authorization","handleError","updateUsername","put","username","emit","alert","defaultMessage","message"],"sources":["D:\\JetBrains\\PROJECTPY\\cite_store\\frontend\\src\\views\\ProfilePage.vue"],"sourcesContent":["<template>\r\n  <div class=\"profile-container\">\r\n    <h2>Профиль пользователя</h2>\r\n    <div v-if=\"user\" class=\"profile-info\">\r\n      <p><strong>Имя пользователя:</strong> {{ user.username }}</p>\r\n      <p><strong>Дата регистрации:</strong> {{ user.datareg }}</p>\r\n\r\n      <div class=\"update-username\">\r\n        <input v-model=\"newUsername\" placeholder=\"Введите новое имя\" class=\"username-input\" />\r\n        <button @click=\"updateUsername\" class=\"update-button\">Изменить имя</button>\r\n      </div>\r\n    </div>\r\n    <div v-else-if=\"error\" class=\"error-message\">\r\n      <p>{{ error }}</p>\r\n    </div>\r\n    <div v-else class=\"loading-message\">\r\n      <p>Загрузка...</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport EventBus from '../Refresh';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      user: null,\r\n      error: null,\r\n      newUsername: '',\r\n    };\r\n  },\r\n  async created() {\r\n    await this.fetchProfile();\r\n  },\r\n  methods: {\r\n    async fetchProfile() {\r\n      try {\r\n        const token = localStorage.getItem('access_token');\r\n        const response = await axios.get('http://localhost:5000/api/users/user/profile', {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n        this.user = response.data;\r\n      } catch (error) {\r\n        this.handleError(error, 'Ошибка получения данных профиля');\r\n      }\r\n    },\r\n    async updateUsername() {\r\n      try {\r\n        const token = localStorage.getItem('access_token');\r\n        const response = await axios.put('http://localhost:5000/api/users/user/profile/update', {\r\n          username: this.newUsername,\r\n        }, {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n\r\n        // Обновляем имя пользователя в локальном состоянии\r\n        this.user.username = response.data.username;\r\n        EventBus.emit('username-updated', this.user.username);\r\n        this.newUsername = '';\r\n        this.error = null; // Сбрасываем сообщение об ошибке, если обновление прошло успешно\r\n      } catch (error) {\r\n        this.handleError(error, 'Ошибка обновления имени пользователя');\r\n        alert(\"Имя занято!\");\r\n      }\r\n    },\r\n    handleError(error, defaultMessage) {\r\n      if (error.response && error.response.data) {\r\n        this.error = error.response.data.message || defaultMessage;\r\n      } else {\r\n        this.error = 'Ошибка соединения с сервером';\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.profile-container {\r\n  max-width: 600px;\r\n  margin: 20px auto;\r\n  padding: 20px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 8px;\r\n  background-color: #f9f9f9;\r\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\nh2 {\r\n  margin-bottom: 20px;\r\n  color: #333;\r\n}\r\n\r\n.profile-info {\r\n  margin-bottom: 20px;\r\n}\r\n\r\np {\r\n  margin: 5px 0;\r\n  color: #555;\r\n}\r\n\r\n.update-username {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-top: 10px;\r\n}\r\n\r\n.username-input {\r\n  flex: 1;\r\n  padding: 10px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n  margin-right: 10px;\r\n}\r\n\r\n.update-button {\r\n  background-color: #3a3a3a;\r\n  color: white;\r\n  border: none;\r\n  padding: 10px 15px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.update-button:hover {\r\n  background-color: #757575;\r\n}\r\n\r\n.error-message {\r\n  color: #f44336;\r\n  margin-top: 10px;\r\n}\r\n\r\n.loading-message {\r\n  color: #999;\r\n  margin-top: 10px;\r\n}\r\n</style>"],"mappings":"AAsBA,OAAOA,KAAI,MAAO,OAAO;AACzB,OAAOC,QAAO,MAAO,YAAY;AAEjC,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE,IAAI;MACVC,KAAK,EAAE,IAAI;MACXC,WAAW,EAAE;IACf,CAAC;EACH,CAAC;EACD,MAAMC,OAAOA,CAAA,EAAG;IACd,MAAM,IAAI,CAACC,YAAY,CAAC,CAAC;EAC3B,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,YAAYA,CAAA,EAAG;MACnB,IAAI;QACF,MAAME,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;QAClD,MAAMC,QAAO,GAAI,MAAMZ,KAAK,CAACa,GAAG,CAAC,8CAA8C,EAAE;UAC/EC,OAAO,EAAE;YACPC,aAAa,EAAE,UAAUN,KAAK;UAChC;QACF,CAAC,CAAC;QACF,IAAI,CAACN,IAAG,GAAIS,QAAQ,CAACV,IAAI;MAC3B,EAAE,OAAOE,KAAK,EAAE;QACd,IAAI,CAACY,WAAW,CAACZ,KAAK,EAAE,iCAAiC,CAAC;MAC5D;IACF,CAAC;IACD,MAAMa,cAAcA,CAAA,EAAG;MACrB,IAAI;QACF,MAAMR,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;QAClD,MAAMC,QAAO,GAAI,MAAMZ,KAAK,CAACkB,GAAG,CAAC,qDAAqD,EAAE;UACtFC,QAAQ,EAAE,IAAI,CAACd;QACjB,CAAC,EAAE;UACDS,OAAO,EAAE;YACPC,aAAa,EAAE,UAAUN,KAAK;UAChC;QACF,CAAC,CAAC;;QAEF;QACA,IAAI,CAACN,IAAI,CAACgB,QAAO,GAAIP,QAAQ,CAACV,IAAI,CAACiB,QAAQ;QAC3ClB,QAAQ,CAACmB,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAACjB,IAAI,CAACgB,QAAQ,CAAC;QACrD,IAAI,CAACd,WAAU,GAAI,EAAE;QACrB,IAAI,CAACD,KAAI,GAAI,IAAI,EAAE;MACrB,EAAE,OAAOA,KAAK,EAAE;QACd,IAAI,CAACY,WAAW,CAACZ,KAAK,EAAE,sCAAsC,CAAC;QAC/DiB,KAAK,CAAC,aAAa,CAAC;MACtB;IACF,CAAC;IACDL,WAAWA,CAACZ,KAAK,EAAEkB,cAAc,EAAE;MACjC,IAAIlB,KAAK,CAACQ,QAAO,IAAKR,KAAK,CAACQ,QAAQ,CAACV,IAAI,EAAE;QACzC,IAAI,CAACE,KAAI,GAAIA,KAAK,CAACQ,QAAQ,CAACV,IAAI,CAACqB,OAAM,IAAKD,cAAc;MAC5D,OAAO;QACL,IAAI,CAAClB,KAAI,GAAI,8BAA8B;MAC7C;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}